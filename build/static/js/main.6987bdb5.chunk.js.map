{"version":3,"sources":["components/EstimateForm.js","components/ImpactEstimation.js","components/SevereImpactEstimation.js","components/EstimatedInfo.js","App.js","serviceWorker.js","index.js"],"names":["EstimateForm","props","className","Form","onSubmit","Group","controlId","Label","Control","type","value","population","onChange","e","setPopulation","target","placeholder","min","required","timeToElapse","setTimeToElapse","reportedCases","setReportedCases","totalHospitalBeds","setTotalHospitalBeds","as","periodType","setPeriodType","Button","style","boxShadow","id","variant","size","block","ImpactEstimation","impact_data","currentlyInfected","infectionsByRequestedTime","Math","trunc","normalizePeriod","severeCasesByRequestedTime","hospitalBedsByRequestedTime","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","Table","striped","bordered","hover","color","Object","keys","length","colSpan","SevereImpactEstimation","severeImpact_data","EstimatedInfo","covid_data","data","period","timeToElaps","weeksInDays","monthsInDays","key","App","useState","setData","backgroundColor","height","border","Navbar","Container","maxWidth","Brand","to","display","Row","flexWrap","Col","md","flexGrow","flexShrink","flexBasis","width","preventDefault","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6987bdb5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nconst EstimateForm = (props) => {\r\n\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n        <div className=\"form-title\">Estimator Form</div>\r\n      <Form onSubmit={(props.onSubmit)}>\r\n        <Form.Group controlId=\"data-population\">\r\n          <Form.Label>Population</Form.Label>\r\n          <Form.Control type=\"number\" value={props.population} onChange={(e)=>props.setPopulation(e.target.value)} placeholder=\"90000000\" min=\"1\"  required/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"data-time-to-elapse\">\r\n          <Form.Label>Time To Elapse</Form.Label>\r\n          <Form.Control type=\"number\" value={props.timeToElapse} onChange={(e)=>props.setTimeToElapse(e.target.value)} placeholder=\"56\" min=\"1\"  required/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"data-reported-cases\">\r\n          <Form.Label>Reported Cases</Form.Label>\r\n          <Form.Control type=\"number\" value={props.reportedCases} onChange={(e)=>props.setReportedCases(e.target.value)} placeholder=\"400000\" min=\"1\"  required/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"data-total-hospital-beds\">\r\n          <Form.Label>Total Hospital Beds</Form.Label>\r\n          <Form.Control type=\"number\" value={props.totalHospitalBeds} onChange={(e)=>props.setTotalHospitalBeds(e.target.value)} placeholder=\"90000\" min=\"1\"  required/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"data-period-type\">\r\n          <Form.Label>Period Type</Form.Label>\r\n          <Form.Control as=\"select\" value={props.periodType} onChange={(e) =>props.setPeriodType(e.target.value)}>\r\n            <option value='days'>Days</option>\r\n            <option value='weeks'>Weeks</option>\r\n            <option value='months'>Months</option>\r\n          </Form.Control>\r\n        </Form.Group>\r\n\r\n        <Button style={{boxShadow: '0px 8px 10px 0px grey'}} id=\"data-go-estimate\" variant=\"info\" size=\"lg\" block=\"block\" type=\"submit\">\r\n          Go Estimate\r\n        </Button>\r\n      </Form> \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default EstimateForm;","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\n\r\nconst ImpactEstimation = (props) => {\r\n    const impact_data = props.impact_data;\r\n    const currentlyInfected = impact_data.reportedCases * 10;\r\n    const infectionsByRequestedTime = Math.trunc(currentlyInfected * props.normalizePeriod(impact_data.periodType, impact_data.timeToElapse));\r\n    const severeCasesByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.15);\r\n    const hospitalBedsByRequestedTime = Math.trunc(impact_data.totalHospitalBeds - severeCasesByRequestedTime);\r\n    const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.05);\r\n    const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.02);\r\n    return (\r\n        <>\r\n            <h2>Impact Estimation</h2>\r\n            <Table striped bordered hover>\r\n            <thead>\r\n            <tr style={{color: '#007bff'}}>\r\n                <th>Currently Infected</th>\r\n                <th>Infections By Requested Time</th>\r\n                <th>Severe Cases By Requested Time</th>\r\n                <th>Hospital Beds By Requested Time</th>\r\n                <th>Cases For ICU By Requested Time</th>\r\n                <th>Cases For Ventilators By Requested Time</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {Object.keys(impact_data).length > 0 ? (\r\n                <tr>\r\n                    <td>{currentlyInfected}</td>\r\n                    <td>{infectionsByRequestedTime}</td>\r\n                    <td>{severeCasesByRequestedTime}</td>\r\n                    <td>{hospitalBedsByRequestedTime}</td>\r\n                    <td>{casesForICUByRequestedTime}</td>\r\n                    <td>{casesForVentilatorsByRequestedTime}</td>\r\n                </tr>\r\n            ) : (\r\n                <tr>\r\n                <td colSpan={3}>No Data</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ImpactEstimation;","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\n\r\nconst SevereImpactEstimation = (props) => {\r\n    const severeImpact_data = props.severeImpact_data;\r\n    const currentlyInfected = severeImpact_data.reportedCases * 50;\r\n    const infectionsByRequestedTime = Math.trunc(currentlyInfected * props.normalizePeriod(severeImpact_data.periodType, severeImpact_data.timeToElapse));\r\n    const severeCasesByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.15);\r\n    const hospitalBedsByRequestedTime = Math.trunc(severeImpact_data.totalHospitalBeds - severeCasesByRequestedTime);\r\n    const casesForICUByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.05);\r\n    const casesForVentilatorsByRequestedTime = Math.trunc(infectionsByRequestedTime * 0.02);\r\n    return (\r\n        <>\r\n            <h2>Severe Impact Estimation</h2>\r\n            <Table striped bordered hover>\r\n            <thead>\r\n            <tr style={{color: '#007bff'}}>\r\n                <th>Currently Infected</th>\r\n                <th>Infections By Requested Time</th>\r\n                <th>Severe Cases By Requested Time</th>\r\n                <th>Hospital Beds By Requested Time</th>\r\n                <th>Cases For ICU By Requested Time</th>\r\n                <th>Cases For Ventilators By Requested Time</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {Object.keys(severeImpact_data).length > 0 ? (\r\n                <tr>\r\n                    <td>{currentlyInfected}</td>\r\n                    <td>{infectionsByRequestedTime}</td>\r\n                    <td>{severeCasesByRequestedTime}</td>\r\n                    <td>{hospitalBedsByRequestedTime}</td>\r\n                    <td>{casesForICUByRequestedTime}</td>\r\n                    <td>{casesForVentilatorsByRequestedTime}</td>\r\n                </tr>\r\n            ) : (\r\n                <tr>\r\n                <td colSpan={3}>No Data</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n        </Table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SevereImpactEstimation;","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport ImpactEstimation from './ImpactEstimation';\r\nimport SevereImpactEstimation from './SevereImpactEstimation';\r\n\r\nconst EstimatedInfo = (props) => {\r\n    const covid_data = props.data;\r\n\r\n    const normalizePeriod = (period, timeToElapse) => {\r\n      let timeToElaps = 2 ** Math.trunc(timeToElapse / 3);\r\n      const weeksInDays = timeToElapse * 7;\r\n      const monthsInDays = timeToElapse * 30;\r\n      switch (period) {\r\n        case 'days':\r\n          return timeToElaps;\r\n        case 'weeks':\r\n          timeToElaps = 2 ** Math.trunc(weeksInDays / 3);\r\n          return timeToElaps;\r\n        case 'months':\r\n          timeToElaps = 2 ** Math.trunc(monthsInDays / 3);\r\n          return timeToElaps;\r\n        default:\r\n          return timeToElapse;\r\n      }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h2>Data To Estimate</h2>\r\n            <Table striped bordered hover>\r\n            <thead>\r\n            <tr style={{color: '#007bff'}}>\r\n                <th>Population</th>\r\n                <th>Time To Elapse</th>\r\n                <th>Reported Cases</th>\r\n                <th>Total Hospital Beds</th>\r\n                <th>Period Type</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {Object.keys(covid_data).length > 0 ? (\r\n                <tr key={1}>\r\n                    <td>{covid_data.population}</td>\r\n                    <td>{covid_data.timeToElapse}</td>\r\n                    <td>{covid_data.reportedCases}</td>\r\n                    <td>{covid_data.totalHospitalBeds}</td>\r\n                    <td>{covid_data.periodType}</td>\r\n                </tr>\r\n            ) : (\r\n                <tr>\r\n                <td colSpan={3}>No users</td>\r\n                </tr>\r\n            )}\r\n            </tbody>\r\n            </Table>\r\n            <ImpactEstimation\r\n                normalizePeriod={normalizePeriod}\r\n                impact_data={covid_data}\r\n            />\r\n            <SevereImpactEstimation\r\n                normalizePeriod={normalizePeriod}\r\n                severeImpact_data={covid_data}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EstimatedInfo;","import React, { useState } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n  Navbar\r\n} from \"react-bootstrap\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"./App.css\";\r\n\r\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\r\nimport EstimateForm from \"./components/EstimateForm\";\r\nimport EstimatedInfo from \"./components/EstimatedInfo\";\r\n\r\nfunction App() {\r\n\r\n  const [population, setPopulation] = useState(47000000);\r\n  const [timeToElapse, setTimeToElapse] = useState(28);\r\n  const [reportedCases, setReportedCases] = useState(1760);\r\n  const [totalHospitalBeds, setTotalHospitalBeds] = useState(70000);\r\n  const [periodType, setPeriodType] = useState('days');\r\n\r\n  const [data, setData] = useState({\r\n    population: population,\r\n    timeToElapse: timeToElapse,\r\n    reportedCases: reportedCases,\r\n    totalHospitalBeds: totalHospitalBeds,\r\n    periodType:periodType\r\n  });\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    setData({ population, timeToElapse, reportedCases, totalHospitalBeds, periodType });\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\" style={{ backgroundColor: 'transparent',height:'80px',border: '1px solid lightskyblue',boxShadow: '1px 1px 10px 0px grey'}} >\r\n        <Navbar variant=\"light\">\r\n          <Container style={{maxWidth: '800'}}>\r\n            <Navbar.Brand>\r\n              <Link style={{color: '#007bff'}}  to={\"/\"} className=\"nav-link\">\r\n                Covid19 Estimator\r\n              </Link>\r\n            </Navbar.Brand>\r\n          </Container>\r\n        </Navbar>\r\n      </header>\r\n\r\n      <Container style={{display:'flex'}}>\r\n        <Row style={{display:'flex', flexWrap: 'noWrap'}}>\r\n          <Col md={12} style={{display: 'flex', flexGrow: '0', flexShrink: '0', flexBasis: '350px'}}>\r\n              <div className=\"wrapper\" style={{width:'-webkit-fill-available'}}>\r\n                <EstimateForm\r\n                  population={population}\r\n                  timeToElapse={timeToElapse}\r\n                  reportedCases={reportedCases}\r\n                  totalHospitalBeds={totalHospitalBeds}\r\n                  periodType={periodType}\r\n                  onSubmit={onSubmit} data={data}\r\n                  setPopulation={setPopulation}\r\n                  setTimeToElapse={setTimeToElapse}\r\n                  setReportedCases={setReportedCases}\r\n                  setTotalHospitalBeds={setTotalHospitalBeds}\r\n                  setPeriodType={setPeriodType}\r\n                />    \r\n            </div>\r\n            </Col>\r\n            <Col md={12} style={{display: 'flex', flexGrow: '0', flexShrink: '0', flexBasis: '570px'}}>\r\n              <div className=\"wrapper\" style={{width:'-webkit-fill-available'}}>\r\n                <EstimatedInfo\r\n                  data={data}\r\n                />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}